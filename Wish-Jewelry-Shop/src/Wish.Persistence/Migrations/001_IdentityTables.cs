using FluentMigrator;
using Wish.Persistence.Common;

namespace Wish.Persistence.Migrations;

[Migration(1, "Identity tables")]
public class IdentityTables : SqlMigration
{
	protected override string GetUpSql(IServiceProvider services) => @"
-- Users --
create table identity_users
(
    id	bigint generated by default as identity
        constraint pk_identity_users
            primary key,
    user_name              varchar(256),
    normalized_user_name   varchar(256),
    email                  varchar(256),
    normalized_email       varchar(256),
    email_confirmed        boolean not null,
    password_hash          text,
    security_stamp         text,
    concurrency_stamp      text,
    phone_number           text,
    phone_number_confirmed boolean not null,
    two_factor_enabled     boolean not null,
    lockout_end            timestamp with time zone,
    lockout_enabled        boolean not null,
    access_failed_count    integer not null
);

create index email_idx
    on identity_users (normalized_email);

create unique index user_name_idx
    on identity_users (normalized_user_name);

-- Roles --
create table identity_roles
(
    id	bigint generated by default as identity
        constraint pk_identity_roles
            primary key,
    name              varchar(256),
    normalized_name   varchar(256),
    concurrency_stamp text
);

create unique index identity_role_name_idx
    on identity_roles (normalized_name);

-- RoleClaims --
create table identity_role_claims
(
    id          integer generated by default as identity
        constraint pk_identity_role_claims
            primary key,
    role_id     bigint not null
        constraint fk_identity_role_claims__identity_roles_role_id
            references identity_roles
            on delete cascade,
    claim_type  text,
    claim_value text
);

create index identity_role_claims_idx
    on identity_role_claims (role_id);

-- UserClaims --
create table identity_user_claims
(
    id          integer generated by default as identity
        constraint pk_identity_user_claims
            primary key,
    user_id     bigint not null
        constraint fk_identity_user_claims__identity_users_user_id
            references identity_users
            on delete cascade,
    claim_type  text,
    claim_value text
);

create index identity_user_claims_user_id_idx
    on identity_user_claims (user_id);

-- UserLogins --
create table identity_user_logins
(
    login_provider        text   not null,
    provider_key          text   not null,
    provider_display_name text,
    user_id               bigint not null
        constraint fk_identity_user_logins__identity_users_user_id
            references identity_users
            on delete cascade,
    constraint pk_identity_user_logins
        primary key (login_provider, provider_key)
);

create index identity_user_logins_user_id_idx
    on identity_user_logins (user_id);


-- UserRoles --
create table identity_user_roles
(
    user_id bigint not null
        constraint fk_identity_user_roles__identity_users_user_id
            references identity_users
            on delete cascade,
    role_id bigint not null
        constraint fk_identity_user_roles__identity_roles_role_id
            references identity_roles
            on delete cascade,
    constraint pk_identity_user_roles
        primary key (user_id, role_id)
);

create index identity_user_roles_role_id
    on identity_user_roles (role_id);

-- UserTokens --
create table identity_user_tokens
(
    user_id        bigint not null
        constraint fk_identity_user_tokens__identity_users_user_id
            references identity_users
            on delete cascade,
    login_provider text   not null,
    name           text   not null,
    value          text,
    constraint pk_identity_user_tokens
        primary key (user_id, login_provider, name)
);
";

    protected override string GetDownSql(IServiceProvider services) => @"
drop table if exists identity_user_tokens;
drop table if exists identity_user_roles;
drop table if exists identity_user_logins;
drop table if exists identity_user_claims;
drop table if exists identity_role_claims;
drop table if exists identity_roles;
drop table if exists identity_users;
";
}
